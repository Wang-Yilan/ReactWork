{"version":3,"sources":["work/Input.js","work/List.js","work/TodoList.js","index.js"],"names":["Input","handleChange","e","props","handleInputChange","addTodo","add","inpValue","this","className","htmlFor","id","ref","inp","input","value","type","onChange","onClick","Component","List","delTodo","index","handleDeleteClick","toggle","handleUpdateClick","renderTodos","done","todos","map","todo","idx","checked","dangerouslySetInnerHTML","__html","title","arr1","filter","item","length","TodoList","setState","target","state","newTodos","JSON","parse","stringify","localStorage","setItem","ReactDOM","render","document","getElementById"],"mappings":"6KA8BeA,E,4MAzBXC,aAAe,SAACC,GACZ,EAAKC,MAAMC,kBAAkBF,I,EAGjCG,QAAU,WACN,EAAKF,MAAMG,O,uDAGL,IAAD,OACDC,EAAWC,KAAKL,MAAMI,SAC1B,OACI,yBAAKE,UAAU,OACX,2BAAOC,QAAQ,OAAf,YACA,2BACIC,GAAK,MACLC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAOR,EACPS,KAAK,OACLC,SAAYT,KAAKP,eAErB,4BAAQiB,QAASV,KAAKH,SAAtB,qB,GAvBIc,aC+CLC,E,4MA5CXC,QAAU,SAACC,GACP,EAAKnB,MAAMoB,kBAAkBD,I,EAIjCE,OAAS,SAACF,GACN,EAAKnB,MAAMsB,kBAAkBH,I,EAIjCI,YAAc,SAACC,GAEX,OADY,EAAKxB,MAAMyB,MACVC,KAAI,SAACC,EAAKC,GACnB,GAAGJ,GAAMG,EAAKH,KACV,OAAM,4BACF,2BAAOT,QAAS,kBAAI,EAAKM,OAAOO,IAAMC,QAASL,EAAMX,KAAK,aAE1D,0BAAMiB,wBAAyB,CAACC,OAAOJ,EAAKK,SAC5C,4BAAQjB,QAAW,kBAAI,EAAKG,QAAQU,KAApC,qB,uDAOZ,IACIK,EADQ5B,KAAKL,MAAMyB,MACNS,QAAQ,SAAAC,GAAI,OAAKA,EAAKX,QAEvC,OAEI,6BACI,uDAASS,EAAKG,QACd,4BACK/B,KAAKkB,aAAY,IAEtB,wDACA,4BACKlB,KAAKkB,aAAY,S,GAxCnBP,aC2EJqB,E,kDAxEX,aAAc,IAAD,8BACT,gBAYJvC,aAAe,SAACC,GACZ,EAAKuC,SAAS,CAAClC,SAASL,EAAEwC,OAAO3B,SAdxB,EAwBbV,QAAU,WACN,EAAKoC,SAAS,CACVb,MAAM,CACF,CACIO,MAAM,EAAKQ,MAAMpC,SACjBoB,MAAK,IAHR,mBAKE,EAAKgB,MAAMf,UAGtB,EAAKa,SAAS,CAAClC,SAAS,MAlCf,EAqCbc,QAAU,SAACU,GACP,EAAKU,SAAS,CACVb,MAAM,EAAKe,MAAMf,MAAMS,QAAO,SAACC,EAAKhB,GAAN,OAAcA,GAASS,QAvChD,EA4CbP,OAAS,SAACF,GACN,IAAIsB,EAAUC,KAAKC,MAAMD,KAAKE,UAAU,EAAKJ,MAAMf,QACnDgB,EAAStB,GAAOK,MAAQiB,EAAStB,GAAOK,KACxC,EAAKc,SAAS,CACVb,MAAMgB,KA9CV,EAAKD,MAAQ,CACTpC,SAAW,GACXqB,MAAM,CACF,CAACO,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,KARf,E,iEAkBTqB,aAAaC,QACT,QACAJ,KAAKE,UAAUvC,KAAKmC,MAAMf,U,+BAkC9B,OACI,6BACI,kBAAC,EAAD,CACIrB,SAAYC,KAAKmC,MAAMpC,SACvBqB,MAASpB,KAAKmC,MAAMf,MACpBtB,IAAOE,KAAKH,QACZD,kBAAqBI,KAAKP,eAE9B,kBAAC,EAAD,CACI2B,MAASpB,KAAKmC,MAAMf,MACpBL,kBAAqBf,KAAKa,QAC1BI,kBAAqBjB,KAAKgB,c,GAlEvBL,aCOvB+B,IAASC,OASP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.28cb0765.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n\r\n    //监听输入框\r\n    handleChange = (e)=>{\r\n        this.props.handleInputChange(e);\r\n    }\r\n\r\n    addTodo = ()=>{\r\n        this.props.add();\r\n    }\r\n\r\n    render() {\r\n        let inpValue = this.props.inpValue;\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id = \"inp\" \r\n                    ref={inp=>this.input = inp} \r\n                    value={inpValue} \r\n                    type=\"text\" \r\n                    onChange = {this.handleChange} \r\n                />\r\n                <button onClick={this.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n\r\n    // 删除点击事件\r\n    delTodo = (index)=>{\r\n        this.props.handleDeleteClick(index)\r\n    }\r\n\r\n    // 更新点击事件\r\n    toggle = (index)=>{\r\n        this.props.handleUpdateClick(index);\r\n    }\r\n\r\n    // 渲染接收过来的数据\r\n    renderTodos = (done)=>{\r\n        let todos = this.props.todos;\r\n        return todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return<li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={done} type=\"checkbox\" />\r\n                    {/* <span>{todo.title}</span> */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick = {()=>this.delTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let todos = this.props.todos;\r\n        let arr1 = todos.filter( item => !item.done)\r\n        // console.log(arr1);\r\n        return (\r\n            \r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react'\r\nimport Inptut from './Input'\r\nimport List from './List'\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue : '',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:false},\r\n                {title:'3',done:true},\r\n                {title:'4',done:true}\r\n            ]\r\n        }\r\n    }\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    addTodo = ()=>{\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n    }\r\n\r\n    delTodo = (idx) => {\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index != idx )\r\n        });\r\n    }\r\n\r\n    //更新功能\r\n    toggle = (index)=>{\r\n        let newTodos =JSON.parse(JSON.stringify(this.state.todos)) \r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n\r\n    //渲染数据并传送给子组件数据\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Inptut \r\n                    inpValue = {this.state.inpValue}\r\n                    todos = {this.state.todos}\r\n                    add = {this.addTodo}\r\n                    handleInputChange = {this.handleChange}\r\n                />\r\n                <List \r\n                    todos = {this.state.todos}\r\n                    handleDeleteClick = {this.delTodo}\r\n                    handleUpdateClick = {this.toggle} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Home from './pages/Home'\r\n// import Control from './pages/Control';\r\n// import Demo01 from './pages/Demo01';\r\n// import App from './pages/App';\r\n// import Hoc,{Detail} from './pages/Hoc';\r\n// import Hook from './pages/Hook';\r\n// import Context from './pages/context'\r\nimport TodoList from './work/TodoList';\r\n\r\nReactDOM.render(\r\n  // <Home data='abc'/>,\r\n  // <Control/>,\r\n  // <Demo01/>,\r\n  // <App/>,\r\n  // <div><Hoc/><Detail/></div>,\r\n  // <Context.Provider value='123'>\r\n  //   <Hook/>\r\n  // </Context.Provider>,\r\n  <TodoList/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import $ from 'jquery';\r\n\r\n// console.log($);\r\n\r\n// const List = (props)=>{\r\n//   return <ul>\r\n//     {\r\n//       props.data.map(\r\n//         (item)=><li>{item.title}</li>)\r\n//     }\r\n//   </ul>\r\n// }\r\n\r\n// // 实例联系  cnode-api\r\n// class Home extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state = {\r\n//       data:[]\r\n//     }\r\n//     fetch('https://cnodejs.org/api/v1/topics')\r\n//     .then(res=>res.json())\r\n//     .then(data=>{\r\n//       this.setState({data:data.data})\r\n//     })\r\n//   }\r\n//   // render(){\r\n//   //   return <ul>\r\n//   //     {\r\n//   //       this.state.data.map(\r\n//   //         (item)=><li>{item.title}</li>\r\n//   //       )\r\n//   //     }\r\n//   //   </ul>\r\n//   // }\r\n//   render(){\r\n//     const { data } = this.state;\r\n//     return <List data={data}/>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Home />,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n\r\n\r\n// let ele = <h1 id='title' className='tit'>\r\n//   <div>hello</div>\r\n//   react\r\n//   <div>{['hello','world']}</div>\r\n// </h1>;\r\n\r\n// let ele = React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   React.createElement('div',{},'hello'),\r\n//   'react'\r\n// )\r\n\r\n// console.log(ele);\r\n//将js对象渲染到DOM中\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     //解构\r\n//     const{type,props}=eleObj;\r\n//     //创建第一层节点\r\n//     let ele =document.createElement(type);\r\n//     //遍历属性对象，将属性添加到第一层节点对象上\r\n//     for (const prop in props) {\r\n//       if (prop == 'children') {\r\n//         if(typeof props.children == 'string'){\r\n//           const txtNode = document.createTextNode(child);\r\n//           ele.appendChild(txtNode);\r\n//           break;\r\n//         }\r\n//         //将第一层节点对象的子元素添加进去\r\n//         props.children.forEach(child => {\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         });\r\n//       }else{\r\n//         ele[prop] = props[prop];\r\n//       }\r\n//     }\r\n//     //将第一层DOM节点添加到container中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// setInterval(()=>{\r\n//   let ele = <h1 id='title' className='tit'>\r\n//     <div>当前时间</div>\r\n//     {new Date().toLocaleString()}\r\n//   </h1>;\r\n//   ReactDOM.render(\r\n//     ele,\r\n//     document.getElementById('root')\r\n//   );\r\n// })\r\n\r\n//组件声明\r\n// //函数组件\r\n// //UI（提示）组件、木偶组件\r\n// function App(props){\r\n//   const{title,id}=props;\r\n//   return <div>\r\n//     <div>{props.title}</div>\r\n//     <div>world</div>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n// // ReactDOM.render(\r\n// //   <App title='abc' id='app'/>,\r\n// //   document.getElementById('root')\r\n// // );\r\n\r\n// //智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state = {\r\n//       name:new Date().toLocaleString()\r\n//     }\r\n//     setTimeout(()=>{\r\n//       this.setState({name:new Date().toLocaleString()});\r\n//     },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title='L' id='app'/>\r\n//     </div>\r\n//   }\r\n// }\r\n\r\n// ReactDOM.render(\r\n//   <Demo/>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n// ReactDOM.render(\r\n//   ele,\r\n//   // <h1>hello</h1>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n\r\n"],"sourceRoot":""}